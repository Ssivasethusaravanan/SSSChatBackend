{"version":3,"file":"light-account.test.js","sourceRoot":"","sources":["../../../../src/light-account/e2e-tests/light-account.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { AlchemyProvider } from \"@alchemy/aa-alchemy\";\nimport { LocalAccountSigner, type SmartAccountSigner } from \"@alchemy/aa-core\";\nimport {\n  isAddress,\n  type Address,\n  type Chain,\n  type HDAccount,\n  type Hash,\n} from \"viem\";\nimport { generatePrivateKey } from \"viem/accounts\";\nimport { sepolia } from \"viem/chains\";\nimport {\n  LightSmartContractAccount,\n  getDefaultLightAccountFactoryAddress,\n} from \"../../index.js\";\nimport {\n  API_KEY,\n  LIGHT_ACCOUNT_OWNER_MNEMONIC,\n  PAYMASTER_POLICY_ID,\n  UNDEPLOYED_OWNER_MNEMONIC,\n} from \"./constants.js\";\n\nconst chain = sepolia;\n\ndescribe(\"Light Account Tests\", () => {\n  const owner: SmartAccountSigner<HDAccount> =\n    LocalAccountSigner.mnemonicToAccountSigner(LIGHT_ACCOUNT_OWNER_MNEMONIC);\n  const undeployedOwner = LocalAccountSigner.mnemonicToAccountSigner(\n    UNDEPLOYED_OWNER_MNEMONIC\n  );\n\n  it(\"should successfully get counterfactual address\", async () => {\n    const provider = givenConnectedProvider({ owner, chain });\n    expect(await provider.getAddress()).toMatchInlineSnapshot(\n      '\"0x1a3a89cd46f124EF40848966c2D7074a575dbC27\"'\n    );\n  });\n\n  it(\"should sign typed data successfully\", async () => {\n    const provider = givenConnectedProvider({ owner, chain });\n    const typedData = {\n      types: {\n        Request: [{ name: \"hello\", type: \"string\" }],\n      },\n      primaryType: \"Request\",\n      message: {\n        hello: \"world\",\n      },\n    };\n    expect(await provider.signTypedData(typedData)).toBe(\n      await owner.signTypedData(typedData)\n    );\n  });\n\n  it(\"should sign message successfully\", async () => {\n    const provider = givenConnectedProvider({ owner, chain });\n    expect(await provider.signMessage(\"test\")).toBe(\n      await owner.signMessage(\"test\")\n    );\n  });\n\n  it(\"should sign typed data with 6492 successfully for undeployed account\", async () => {\n    const undeployedProvider = givenConnectedProvider({\n      owner: undeployedOwner,\n      chain,\n    });\n    const typedData = {\n      types: {\n        Request: [{ name: \"hello\", type: \"string\" }],\n      },\n      primaryType: \"Request\",\n      message: {\n        hello: \"world\",\n      },\n    };\n    expect(\n      await undeployedProvider.signTypedDataWith6492(typedData)\n    ).toMatchInlineSnapshot(\n      '\"0x00000000000000000000000000000055c0b4fa41dde26a74435ff03692292fbd000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000445fbfb9cf000000000000000000000000ef9d7530d16df66481adf291dc9a12b44c7f7df00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041591a9422219a5f2bc87ee24a82a6d5ef9674bf7408a2a289984de258466d148e75efb65b487ffbfcb061b268b1b667d8d7d4eac2c3d9d2d0a52d49c891be567c1c000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492\"'\n    );\n  });\n\n  it(\"should sign message with 6492 successfully for undeployed account\", async () => {\n    const undeployedProvider = givenConnectedProvider({\n      owner: undeployedOwner,\n      chain,\n    });\n    expect(\n      await undeployedProvider.signMessageWith6492(\"test\")\n    ).toMatchInlineSnapshot(\n      '\"0x00000000000000000000000000000055c0b4fa41dde26a74435ff03692292fbd000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000445fbfb9cf000000000000000000000000ef9d7530d16df66481adf291dc9a12b44c7f7df00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041be34ecce63c5248d5cda407e7da319be3c861e6e2c5d30c9630cd35dcb55e56205c482503552883923f79e751ea3671cbb84d65b18af33cd3034aeb7d529da9a1b000000000000000000000000000000000000000000000000000000000000006492649264926492649264926492649264926492649264926492649264926492\"'\n    );\n  });\n\n  /**\n   * Need to add test eth to the counterfactual address for this test to pass.\n   * For current balance, @see: https://sepolia.etherscan.io/address/0x7eDdc16B15259E5541aCfdebC46929873839B872\n   */\n  it(\"should execute successfully\", async () => {\n    const provider = givenConnectedProvider({ owner, chain });\n    const result = await provider.sendUserOperation({\n      target: await provider.getAddress(),\n      data: \"0x\",\n    });\n    const txnHash = provider.waitForUserOperationTransaction(\n      result.hash as Hash\n    );\n\n    await expect(txnHash).resolves.not.toThrowError();\n  }, 50000);\n\n  it(\"should fail to execute if account address is not deployed and not correct\", async () => {\n    const accountAddress = \"0xc33AbD9621834CA7c6Fc9f9CC3c47b9c17B03f9F\";\n    const newProvider = givenConnectedProvider({\n      owner,\n      chain,\n      accountAddress,\n    });\n\n    const result = newProvider.sendUserOperation({\n      target: await newProvider.getAddress(),\n      data: \"0x\",\n    });\n\n    await expect(result).rejects.toThrowError();\n  });\n\n  it(\"should get counterfactual for undeployed account\", async () => {\n    const owner = LocalAccountSigner.privateKeyToAccountSigner(\n      generatePrivateKey()\n    );\n    const provider = givenConnectedProvider({ owner, chain });\n\n    const address = provider.getAddress();\n    await expect(address).resolves.not.toThrowError();\n    expect(isAddress(await address)).toBe(true);\n  });\n\n  it(\"should get owner successfully\", async () => {\n    const provider = givenConnectedProvider({ owner, chain });\n    expect(await provider.account.getOwnerAddress()).toMatchInlineSnapshot(\n      '\"0x65eaA2AfDF6c97295bA44C458abb00FebFB3a5FA\"'\n    );\n    expect(await provider.account.getOwnerAddress()).toBe(\n      await owner.getAddress()\n    );\n  });\n\n  it(\"should transfer ownership successfully\", async () => {\n    const provider = givenConnectedProvider({\n      owner,\n      chain,\n      feeOpts: {\n        baseFeeBufferPercent: 50n,\n        maxPriorityFeeBufferPercent: 50n,\n        preVerificationGasBufferPercent: 50n,\n      },\n    });\n    // create a throwaway address\n    const throwawayOwner = LocalAccountSigner.privateKeyToAccountSigner(\n      generatePrivateKey()\n    );\n    const throwawayProvider = givenConnectedProvider({\n      owner: throwawayOwner,\n      chain,\n    });\n\n    // fund the throwaway address\n    const fundThrowawayResult = await provider.sendUserOperation({\n      target: await throwawayProvider.getAddress(),\n      data: \"0x\",\n      value: 10000000000000n,\n    });\n    const fundThrowawayTxnHash = provider.waitForUserOperationTransaction(\n      fundThrowawayResult.hash\n    );\n    await expect(fundThrowawayTxnHash).resolves.not.toThrowError();\n\n    // create new owner and transfer ownership\n    const newThrowawayOwner = LocalAccountSigner.privateKeyToAccountSigner(\n      generatePrivateKey()\n    );\n    const result = await LightSmartContractAccount.transferOwnership(\n      throwawayProvider,\n      newThrowawayOwner\n    );\n    const txnHash = throwawayProvider.waitForUserOperationTransaction(result);\n    await expect(txnHash).resolves.not.toThrowError();\n\n    expect(await throwawayProvider.account.getOwnerAddress()).not.toBe(\n      await throwawayOwner.getAddress()\n    );\n    expect(await throwawayProvider.account.getOwnerAddress()).toBe(\n      await newThrowawayOwner.getAddress()\n    );\n  }, 100000);\n});\n\nconst givenConnectedProvider = ({\n  owner,\n  chain,\n  accountAddress,\n  feeOpts,\n}: {\n  owner: SmartAccountSigner;\n  chain: Chain;\n  accountAddress?: Address;\n  feeOpts?: {\n    baseFeeBufferPercent?: bigint;\n    maxPriorityFeeBufferPercent?: bigint;\n    preVerificationGasBufferPercent?: bigint;\n  };\n}) => {\n  const provider = new AlchemyProvider({\n    apiKey: API_KEY!,\n    chain,\n    feeOpts,\n  }).connect(\n    (rpcClient) =>\n      new LightSmartContractAccount({\n        chain,\n        owner,\n        factoryAddress: getDefaultLightAccountFactoryAddress(chain),\n        rpcClient,\n        accountAddress,\n      })\n  );\n  provider.withAlchemyGasManager({\n    policyId: PAYMASTER_POLICY_ID,\n  });\n  return provider;\n};\n"]}