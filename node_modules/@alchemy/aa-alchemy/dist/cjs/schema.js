"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlchemySdkClientSchema = exports.AlchemyProviderConfigSchema = exports.FeeOptsSchema = exports.ConnectionConfigSchema = void 0;
const aa_core_1 = require("@alchemy/aa-core");
const alchemy_sdk_1 = require("alchemy-sdk");
const zod_1 = __importDefault(require("zod"));
exports.ConnectionConfigSchema = zod_1.default.union([
    zod_1.default.object({
        rpcUrl: zod_1.default.never().optional(),
        apiKey: zod_1.default.string(),
        jwt: zod_1.default.never().optional(),
    }),
    zod_1.default.object({
        rpcUrl: zod_1.default.never().optional(),
        apiKey: zod_1.default.never().optional(),
        jwt: zod_1.default.string(),
    }),
    zod_1.default.object({
        rpcUrl: zod_1.default.string(),
        apiKey: zod_1.default.never().optional(),
        jwt: zod_1.default.never().optional(),
    }),
    zod_1.default.object({
        rpcUrl: zod_1.default.string(),
        apiKey: zod_1.default.never().optional(),
        jwt: zod_1.default.string(),
    }),
]);
exports.FeeOptsSchema = zod_1.default.object({
    baseFeeBufferPercent: zod_1.default.bigint().optional(),
    maxPriorityFeeBufferPercent: zod_1.default.bigint().optional(),
    preVerificationGasBufferPercent: zod_1.default.bigint().optional(),
});
exports.AlchemyProviderConfigSchema = zod_1.default
    .object({
    feeOpts: exports.FeeOptsSchema.optional(),
})
    .and((0, aa_core_1.createSmartAccountProviderConfigSchema)().omit({ rpcProvider: true }))
    .and(exports.ConnectionConfigSchema);
exports.AlchemySdkClientSchema = zod_1.default.instanceof(alchemy_sdk_1.Alchemy);
//# sourceMappingURL=schema.js.map