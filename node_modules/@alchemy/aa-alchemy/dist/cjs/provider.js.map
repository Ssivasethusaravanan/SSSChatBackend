{"version":3,"file":"provider.js","sourceRoot":"","sources":["../../src/provider.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  SmartAccountProvider,\n  createPublicErc4337Client,\n  deepHexlify,\n  resolveProperties,\n  type AccountMiddlewareFn,\n  type BatchUserOperationCallData,\n  type UserOperationCallData,\n  type UserOperationOverrides,\n} from \"@alchemy/aa-core\";\nimport { Alchemy } from \"alchemy-sdk\";\nimport { type HttpTransport } from \"viem\";\nimport {\n  arbitrum,\n  arbitrumGoerli,\n  optimism,\n  optimismGoerli,\n} from \"viem/chains\";\nimport { SupportedChains } from \"./chains.js\";\nimport type { ClientWithAlchemyMethods } from \"./middleware/client.js\";\nimport { withAlchemyGasFeeEstimator } from \"./middleware/gas-fees.js\";\nimport {\n  withAlchemyGasManager,\n  type AlchemyGasManagerConfig,\n} from \"./middleware/gas-manager.js\";\nimport { withAlchemyUserOpSimulation } from \"./middleware/simulate-uo.js\";\nimport {\n  AlchemyProviderConfigSchema,\n  AlchemySdkClientSchema,\n} from \"./schema.js\";\nimport type { AlchemyProviderConfig } from \"./type.js\";\n\nexport class AlchemyProvider extends SmartAccountProvider<HttpTransport> {\n  private pvgBuffer: bigint;\n  private feeOptsSet: boolean;\n  private rpcUrl: string;\n\n  constructor(config: AlchemyProviderConfig) {\n    AlchemyProviderConfigSchema.parse(config);\n\n    const { chain, entryPointAddress, opts, feeOpts, ...connectionConfig } =\n      config;\n    const _chain =\n      typeof chain === \"number\" ? SupportedChains.get(chain) : chain;\n    if (!_chain || !_chain.rpcUrls[\"alchemy\"]) {\n      throw new Error(`AlchemyProvider: chain (${chain}) not supported`);\n    }\n\n    const rpcUrl =\n      connectionConfig.rpcUrl == null\n        ? `${_chain.rpcUrls.alchemy.http[0]}/${connectionConfig.apiKey ?? \"\"}`\n        : connectionConfig.rpcUrl;\n\n    const client = createPublicErc4337Client({\n      chain: _chain,\n      rpcUrl,\n      ...(connectionConfig.jwt != null && {\n        fetchOptions: {\n          headers: {\n            Authorization: `Bearer ${connectionConfig.jwt}`,\n          },\n        },\n      }),\n    });\n\n    super({\n      rpcProvider: client,\n      entryPointAddress,\n      chain: _chain,\n      opts,\n    });\n\n    withAlchemyGasFeeEstimator(\n      this,\n      feeOpts?.baseFeeBufferPercent ?? 50n,\n      feeOpts?.maxPriorityFeeBufferPercent ?? 5n\n    );\n\n    if (feeOpts?.preVerificationGasBufferPercent) {\n      this.pvgBuffer = feeOpts?.preVerificationGasBufferPercent;\n    } else if (\n      new Set<number>([\n        arbitrum.id,\n        arbitrumGoerli.id,\n        optimism.id,\n        optimismGoerli.id,\n      ]).has(this.chain.id)\n    ) {\n      this.pvgBuffer = 5n;\n    } else {\n      this.pvgBuffer = 0n;\n    }\n\n    this.feeOptsSet = !!feeOpts;\n    this.rpcUrl = rpcUrl;\n  }\n\n  override gasEstimator: AccountMiddlewareFn = async (struct) => {\n    const request = deepHexlify(await resolveProperties(struct));\n    const estimates = await this.rpcClient.estimateUserOperationGas(\n      request,\n      this.getEntryPointAddress()\n    );\n    estimates.preVerificationGas =\n      (BigInt(estimates.preVerificationGas) * (100n + this.pvgBuffer)) / 100n;\n\n    return {\n      ...struct,\n      ...estimates,\n    };\n  };\n\n  simulateUserOperationAssetChanges = async (\n    data: UserOperationCallData | BatchUserOperationCallData,\n    overrides?: UserOperationOverrides\n  ) => {\n    const uoStruct = deepHexlify(\n      await this.buildUserOperation(data, overrides)\n    );\n\n    return (this.rpcClient as ClientWithAlchemyMethods).request({\n      method: \"alchemy_simulateUserOperationAssetChanges\",\n      params: [uoStruct, this.getEntryPointAddress()],\n    });\n  };\n\n  /**\n   * This methods adds the Alchemy Gas Manager middleware to the provider.\n   *\n   * @param config - the Alchemy Gas Manager configuration\n   * @returns {AlchemyProvider} - a new AlchemyProvider with the Gas Manager middleware\n   */\n  withAlchemyGasManager(config: AlchemyGasManagerConfig): AlchemyProvider {\n    if (!this.isConnected()) {\n      throw new Error(\n        \"AlchemyProvider: account is not set, did you call `connect` first?\"\n      );\n    }\n\n    return withAlchemyGasManager(this, config, !this.feeOptsSet);\n  }\n\n  /**\n   * This methods adds the Alchemy UserOperation Simulation middleware to the provider.\n   *\n   * @returns {AlchemyProvider} - a new AlchemyProvider with the UserOperation Simulation middleware\n   */\n  withAlchemyUserOpSimulation(): this {\n    if (!this.isConnected()) {\n      throw new Error(\n        \"AlchemyProvider: account is not set, did you call `connect` first?\"\n      );\n    }\n\n    return withAlchemyUserOpSimulation(this);\n  }\n\n  /**\n   * This methods adds Alchemy Enhanced APIs to the provider, via an optional dependency on `alchemy-sdk`.\n   * @see: https://github.com/alchemyplatform/alchemy-sdk-js\n   *\n   * The Alchemy SDK client must be configured with the same API key and network as the AlchemyProvider.\n   * This method validates such at runtime.\n   *\n   * Additionally, since the Alchemy SDK client does not yet support JWT authentication, AlchemyProviders initialized with JWTs cannot use this method.\n   * They must be initialized with an API key or RPC URL.\n   * There is an open issue on the Alchemy SDK repo to add JWT support in the meantime.\n   * @see: https://github.com/alchemyplatform/alchemy-sdk-js/issues/386\n   *\n   * @param alchemy - an initialized Alchemy SDK client\n   * @returns - a new AlchemyProvider extended with Alchemy SDK client methods\n   */\n  withAlchemyEnhancedApis(alchemy: Alchemy): this & Alchemy {\n    AlchemySdkClientSchema.parse(alchemy);\n\n    if (alchemy.config.url && alchemy.config.url !== this.rpcUrl) {\n      throw new Error(\n        \"Alchemy SDK client JSON-RPC URL must match AlchemyProvider JSON-RPC URL\"\n      );\n    }\n\n    const alchemyUrl = `https://${alchemy.config.network}.g.alchemy.com/v2/${alchemy.config.apiKey}`;\n    if (alchemyUrl !== this.rpcUrl) {\n      throw new Error(\n        \"Alchemy SDK client JSON-RPC URL must match AlchemyProvider JSON-RPC URL\"\n      );\n    }\n\n    return this.extend(() => {\n      return {\n        core: alchemy.core,\n        nft: alchemy.nft,\n        transact: alchemy.transact,\n        debug: alchemy.debug,\n        ws: alchemy.ws,\n        notify: alchemy.notify,\n        config: alchemy.config,\n      };\n    });\n  }\n}\n"]}