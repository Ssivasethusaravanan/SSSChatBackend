import { Alchemy } from "alchemy-sdk";
import z from "zod";
export declare const ConnectionConfigSchema: z.ZodUnion<[z.ZodObject<{
    rpcUrl: z.ZodOptional<z.ZodNever>;
    apiKey: z.ZodString;
    jwt: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
    rpcUrl?: undefined;
    jwt?: undefined;
}, {
    apiKey: string;
    rpcUrl?: undefined;
    jwt?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodOptional<z.ZodNever>;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    jwt: string;
    rpcUrl?: undefined;
    apiKey?: undefined;
}, {
    jwt: string;
    rpcUrl?: undefined;
    apiKey?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodString;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    rpcUrl: string;
    apiKey?: undefined;
    jwt?: undefined;
}, {
    rpcUrl: string;
    apiKey?: undefined;
    jwt?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodString;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    rpcUrl: string;
    jwt: string;
    apiKey?: undefined;
}, {
    rpcUrl: string;
    jwt: string;
    apiKey?: undefined;
}>]>;
export declare const FeeOptsSchema: z.ZodObject<{
    baseFeeBufferPercent: z.ZodOptional<z.ZodBigInt>;
    maxPriorityFeeBufferPercent: z.ZodOptional<z.ZodBigInt>;
    preVerificationGasBufferPercent: z.ZodOptional<z.ZodBigInt>;
}, "strip", z.ZodTypeAny, {
    baseFeeBufferPercent?: bigint | undefined;
    maxPriorityFeeBufferPercent?: bigint | undefined;
    preVerificationGasBufferPercent?: bigint | undefined;
}, {
    baseFeeBufferPercent?: bigint | undefined;
    maxPriorityFeeBufferPercent?: bigint | undefined;
    preVerificationGasBufferPercent?: bigint | undefined;
}>;
export declare const AlchemyProviderConfigSchema: z.ZodIntersection<z.ZodIntersection<z.ZodObject<{
    feeOpts: z.ZodOptional<z.ZodObject<{
        baseFeeBufferPercent: z.ZodOptional<z.ZodBigInt>;
        maxPriorityFeeBufferPercent: z.ZodOptional<z.ZodBigInt>;
        preVerificationGasBufferPercent: z.ZodOptional<z.ZodBigInt>;
    }, "strip", z.ZodTypeAny, {
        baseFeeBufferPercent?: bigint | undefined;
        maxPriorityFeeBufferPercent?: bigint | undefined;
        preVerificationGasBufferPercent?: bigint | undefined;
    }, {
        baseFeeBufferPercent?: bigint | undefined;
        maxPriorityFeeBufferPercent?: bigint | undefined;
        preVerificationGasBufferPercent?: bigint | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    feeOpts?: {
        baseFeeBufferPercent?: bigint | undefined;
        maxPriorityFeeBufferPercent?: bigint | undefined;
        preVerificationGasBufferPercent?: bigint | undefined;
    } | undefined;
}, {
    feeOpts?: {
        baseFeeBufferPercent?: bigint | undefined;
        maxPriorityFeeBufferPercent?: bigint | undefined;
        preVerificationGasBufferPercent?: bigint | undefined;
    } | undefined;
}>, z.ZodObject<Omit<{
    rpcProvider: z.ZodUnion<[z.ZodString, z.ZodType<import("@alchemy/aa-core").PublicErc4337Client<import("viem").Transport>, z.ZodTypeDef, import("@alchemy/aa-core").PublicErc4337Client<import("viem").Transport>>]>;
    chain: z.ZodType<import("viem").Chain<import("viem").ChainFormatters | undefined>, z.ZodTypeDef, import("viem").Chain<import("viem").ChainFormatters | undefined>>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    opts: z.ZodOptional<z.ZodObject<{
        txMaxRetries: z.ZodOptional<z.ZodNumber>;
        txRetryIntervalMs: z.ZodOptional<z.ZodNumber>;
        txRetryMulitplier: z.ZodOptional<z.ZodNumber>;
        minPriorityFeePerBid: z.ZodOptional<z.ZodBigInt>;
        maxPriorityFeePerGasEstimateBuffer: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    }, {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    }>>;
}, "rpcProvider">, "strip", z.ZodTypeAny, {
    chain: import("viem/_types/types/chain").ChainConstants & import("viem/_types/types/chain").ChainConfig<import("viem").ChainFormatters | undefined>;
    entryPointAddress?: `0x${string}` | undefined;
    opts?: {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    } | undefined;
}, {
    chain: import("viem/_types/types/chain").ChainConstants & import("viem/_types/types/chain").ChainConfig<import("viem").ChainFormatters | undefined>;
    entryPointAddress?: string | undefined;
    opts?: {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    } | undefined;
}>>, z.ZodUnion<[z.ZodObject<{
    rpcUrl: z.ZodOptional<z.ZodNever>;
    apiKey: z.ZodString;
    jwt: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    apiKey: string;
    rpcUrl?: undefined;
    jwt?: undefined;
}, {
    apiKey: string;
    rpcUrl?: undefined;
    jwt?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodOptional<z.ZodNever>;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    jwt: string;
    rpcUrl?: undefined;
    apiKey?: undefined;
}, {
    jwt: string;
    rpcUrl?: undefined;
    apiKey?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodString;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodOptional<z.ZodNever>;
}, "strip", z.ZodTypeAny, {
    rpcUrl: string;
    apiKey?: undefined;
    jwt?: undefined;
}, {
    rpcUrl: string;
    apiKey?: undefined;
    jwt?: undefined;
}>, z.ZodObject<{
    rpcUrl: z.ZodString;
    apiKey: z.ZodOptional<z.ZodNever>;
    jwt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    rpcUrl: string;
    jwt: string;
    apiKey?: undefined;
}, {
    rpcUrl: string;
    jwt: string;
    apiKey?: undefined;
}>]>>;
export declare const AlchemySdkClientSchema: z.ZodType<Alchemy, z.ZodTypeDef, Alchemy>;
