{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../src/schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sCAAsC,EAAE,MAAM,kBAAkB,CAAC;AAC1E,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,CAAC,MAAM,KAAK,CAAC;AAEpB,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAC,KAAK,CAAC;IAC5C,CAAC,CAAC,MAAM,CAAC;QACP,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE;QAClB,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;KAC1B,CAAC;IACF,CAAC,CAAC,MAAM,CAAC;QACP,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE;KAChB,CAAC;IACF,CAAC,CAAC,MAAM,CAAC;QACP,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE;QAClB,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;KAC1B,CAAC;IACF,CAAC,CAAC,MAAM,CAAC;QACP,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE;QAClB,MAAM,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE;QAC5B,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE;KAChB,CAAC;CACH,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,CAAC,MAAM,CAAC;IAIpC,oBAAoB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAI3C,2BAA2B,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAYlD,+BAA+B,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACvD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAC;KACzC,MAAM,CAAC;IACN,OAAO,EAAE,aAAa,CAAC,QAAQ,EAAE;CAClC,CAAC;KACD,GAAG,CAAC,sCAAsC,EAAE,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC;KACzE,GAAG,CAAC,sBAAsB,CAAC,CAAC;AAE/B,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC","sourcesContent":["import { createSmartAccountProviderConfigSchema } from \"@alchemy/aa-core\";\nimport { Alchemy } from \"alchemy-sdk\";\nimport z from \"zod\";\n\nexport const ConnectionConfigSchema = z.union([\n  z.object({\n    rpcUrl: z.never().optional(),\n    apiKey: z.string(),\n    jwt: z.never().optional(),\n  }),\n  z.object({\n    rpcUrl: z.never().optional(),\n    apiKey: z.never().optional(),\n    jwt: z.string(),\n  }),\n  z.object({\n    rpcUrl: z.string(),\n    apiKey: z.never().optional(),\n    jwt: z.never().optional(),\n  }),\n  z.object({\n    rpcUrl: z.string(),\n    apiKey: z.never().optional(),\n    jwt: z.string(),\n  }),\n]);\n\nexport const FeeOptsSchema = z.object({\n  /** this adds a percent buffer on top of the base fee estimated (default 50%)\n   * NOTE: this is only applied if the default fee estimator is used.\n   */\n  baseFeeBufferPercent: z.bigint().optional(),\n  /** this adds a percent buffer on top of the priority fee estimated (default 5%)'\n   * * NOTE: this is only applied if the default fee estimator is used.\n   */\n  maxPriorityFeeBufferPercent: z.bigint().optional(),\n  /** this adds a percent buffer on top of the preVerificationGas estimated\n   *\n   * Defaults 5% on Arbitrum and Optimism, 0% elsewhere\n   *\n   * This is only useful on Arbitrum and Optimism, where the preVerificationGas is\n   * dependent on the gas fee during the time of estimation. To improve chances of\n   * the UserOperation being mined, users can increase the preVerificationGas by\n   * a buffer. This buffer will always be charged, regardless of price at time of mine.\n   *\n   * NOTE: this is only applied if the defualt gas estimator is used.\n   */\n  preVerificationGasBufferPercent: z.bigint().optional(),\n});\n\nexport const AlchemyProviderConfigSchema = z\n  .object({\n    feeOpts: FeeOptsSchema.optional(),\n  })\n  .and(createSmartAccountProviderConfigSchema().omit({ rpcProvider: true }))\n  .and(ConnectionConfigSchema);\n\nexport const AlchemySdkClientSchema = z.instanceof(Alchemy);\n"]}