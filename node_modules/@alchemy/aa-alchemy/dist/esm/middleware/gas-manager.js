import { deepHexlify, resolveProperties, } from "@alchemy/aa-core";
export const withAlchemyGasManager = (provider, config, estimateGas = true) => {
    return estimateGas
        ? provider
            .withGasEstimator(async () => ({
            callGasLimit: 0n,
            preVerificationGas: 0n,
            verificationGasLimit: 0n,
        }))
            .withFeeDataGetter(async (struct) => ({
            maxFeePerGas: (await struct.maxFeePerGas) ?? 0n,
            maxPriorityFeePerGas: (await struct.maxPriorityFeePerGas) ?? 0n,
        }))
            .withPaymasterMiddleware(withAlchemyGasAndPaymasterAndDataMiddleware(provider, config))
        : provider.withPaymasterMiddleware(withAlchemyPaymasterAndDataMiddleware(provider, config));
};
const withAlchemyPaymasterAndDataMiddleware = (provider, config) => ({
    dummyPaymasterDataMiddleware: async (_struct) => {
        switch (provider.rpcClient.chain.id) {
            case 1:
            case 10:
            case 137:
            case 42161:
                return {
                    paymasterAndData: "0x4Fd9098af9ddcB41DA48A1d78F91F1398965addcfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c",
                };
            default:
                return {
                    paymasterAndData: "0xc03aac639bb21233e0139381970328db8bceeb67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c",
                };
        }
    },
    paymasterDataMiddleware: async (struct) => {
        const { paymasterAndData } = await provider.rpcClient.request({
            method: "alchemy_requestPaymasterAndData",
            params: [
                {
                    policyId: config.policyId,
                    entryPoint: provider.getEntryPointAddress(),
                    userOperation: deepHexlify(await resolveProperties(struct)),
                },
            ],
        });
        return { paymasterAndData };
    },
});
const withAlchemyGasAndPaymasterAndDataMiddleware = (provider, config) => ({
    paymasterDataMiddleware: async (struct) => {
        const userOperation = deepHexlify(await resolveProperties(struct));
        let feeOverride = undefined;
        if (userOperation.maxFeePerGas && BigInt(userOperation.maxFeePerGas) > 0n) {
            feeOverride = {
                maxFeePerGas: userOperation.maxFeePerGas,
                maxPriorityFeePerGas: userOperation.maxPriorityFeePerGas,
            };
        }
        const result = await provider.rpcClient.request({
            method: "alchemy_requestGasAndPaymasterAndData",
            params: [
                {
                    policyId: config.policyId,
                    entryPoint: provider.getEntryPointAddress(),
                    userOperation: userOperation,
                    dummySignature: userOperation.signature,
                    feeOverride: feeOverride,
                },
            ],
        });
        return result;
    },
});
//# sourceMappingURL=gas-manager.js.map