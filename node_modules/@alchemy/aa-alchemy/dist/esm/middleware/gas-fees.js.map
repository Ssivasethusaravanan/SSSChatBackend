{"version":3,"file":"gas-fees.js","sourceRoot":"","sources":["../../../src/middleware/gas-fees.ts"],"names":[],"mappings":"AAGA,MAAM,CAAC,MAAM,0BAA0B,GAAG,CACxC,QAAyB,EACzB,oBAA4B,EAC5B,2BAAmC,EAClB,EAAE;IACnB,QAAQ,CAAC,iBAAiB,CAAC,KAAK,IAAI,EAAE;QACpC,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;QACxE,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;QAC1C,IAAI,aAAa,IAAI,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,MAAM,iBAAiB,GAAG,MAAM,CAE9B,MAAO,QAAQ,CAAC,SAAsC,CAAC,OAAO,CAAC;YAC7D,MAAM,EAAE,8BAA8B;YACtC,MAAM,EAAE,EAAE;SACX,CAAC,CACH,CAAC;QAEF,MAAM,eAAe,GACnB,CAAC,aAAa,GAAG,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,GAAG,IAAI,CAAC;QACzD,MAAM,eAAe,GACnB,CAAC,iBAAiB,GAAG,CAAC,IAAI,GAAG,2BAA2B,CAAC,CAAC,GAAG,IAAI,CAAC;QAEpE,OAAO;YACL,YAAY,EAAE,eAAe,GAAG,eAAe;YAC/C,oBAAoB,EAAE,eAAe;SACtC,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import type { AlchemyProvider } from \"../provider.js\";\nimport type { ClientWithAlchemyMethods } from \"./client.js\";\n\nexport const withAlchemyGasFeeEstimator = (\n  provider: AlchemyProvider,\n  baseFeeBufferPercent: bigint,\n  maxPriorityFeeBufferPercent: bigint\n): AlchemyProvider => {\n  provider.withFeeDataGetter(async () => {\n    const block = await provider.rpcClient.getBlock({ blockTag: \"latest\" });\n    const baseFeePerGas = block.baseFeePerGas;\n    if (baseFeePerGas == null) {\n      throw new Error(\"baseFeePerGas is null\");\n    }\n    const priorityFeePerGas = BigInt(\n      // it's a fair assumption that if someone is using this Alchemy Middleware, then they are using Alchemy RPC\n      await (provider.rpcClient as ClientWithAlchemyMethods).request({\n        method: \"rundler_maxPriorityFeePerGas\",\n        params: [],\n      })\n    );\n\n    const baseFeeIncrease =\n      (baseFeePerGas * (100n + baseFeeBufferPercent)) / 100n;\n    const prioFeeIncrease =\n      (priorityFeePerGas * (100n + maxPriorityFeeBufferPercent)) / 100n;\n\n    return {\n      maxFeePerGas: baseFeeIncrease + prioFeeIncrease,\n      maxPriorityFeePerGas: prioFeeIncrease,\n    };\n  });\n  return provider;\n};\n"]}