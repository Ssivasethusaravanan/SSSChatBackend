{"version":3,"file":"gas-manager.js","sourceRoot":"","sources":["../../../src/middleware/gas-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  deepHexlify,\n  resolveProperties,\n  type UserOperationRequest,\n} from \"@alchemy/aa-core\";\nimport type { AlchemyProvider } from \"../provider.js\";\nimport type { ClientWithAlchemyMethods } from \"./client.js\";\n\nexport interface AlchemyGasManagerConfig {\n  policyId: string;\n}\n\n/**\n * This middleware wraps the Alchemy Gas Manager APIs to provide more flexible UserOperation gas sponsorship.\n *\n * If `estimateGas` is true, it will use `alchemy_requestGasAndPaymasterAndData` to get all of the gas estimates + paymaster data\n * in one RPC call.\n *\n * Otherwise, it will use `alchemy_requestPaymasterAndData` to get only paymaster data, allowing you\n * to customize the gas and fee estimation middleware.\n *\n * @param provider - the smart account provider to override to use the alchemy gas manager\n * @param config - the alchemy gas manager configuration\n * @param estimateGas - if true, this will use `alchemy_requestGasAndPaymasterAndData` else will use `alchemy_requestPaymasterAndData`\n * @returns the provider augmented to use the alchemy gas manager\n */\nexport const withAlchemyGasManager = (\n  provider: AlchemyProvider,\n  config: AlchemyGasManagerConfig,\n  estimateGas: boolean = true\n): AlchemyProvider => {\n  return estimateGas\n    ? provider\n        // no-op gas estimator\n        .withGasEstimator(async () => ({\n          callGasLimit: 0n,\n          preVerificationGas: 0n,\n          verificationGasLimit: 0n,\n        }))\n        // no-op fee because the alchemy api will do it\n        .withFeeDataGetter(async (struct) => ({\n          maxFeePerGas: (await struct.maxFeePerGas) ?? 0n,\n          maxPriorityFeePerGas: (await struct.maxPriorityFeePerGas) ?? 0n,\n        }))\n        .withPaymasterMiddleware(\n          withAlchemyGasAndPaymasterAndDataMiddleware(provider, config)\n        )\n    : provider.withPaymasterMiddleware(\n        withAlchemyPaymasterAndDataMiddleware(provider, config)\n      );\n};\n\n/**\n * This uses the alchemy RPC method: `alchemy_requestPaymasterAndData`, which does not estimate gas. It's recommended to use\n * this middleware if you want more customization over the gas and fee estimation middleware, including setting\n * non-default buffer values for the fee/gas estimation.\n *\n * @param config - the alchemy gas manager configuration\n * @returns middleware overrides for paymaster middlewares\n */\nconst withAlchemyPaymasterAndDataMiddleware = (\n  provider: AlchemyProvider,\n  config: AlchemyGasManagerConfig\n): Parameters<AlchemyProvider[\"withPaymasterMiddleware\"]>[\"0\"] => ({\n  dummyPaymasterDataMiddleware: async (_struct) => {\n    switch (provider.rpcClient.chain.id) {\n      case 1:\n      case 10:\n      case 137:\n      case 42161:\n        return {\n          paymasterAndData:\n            \"0x4Fd9098af9ddcB41DA48A1d78F91F1398965addcfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\",\n        };\n      default:\n        return {\n          paymasterAndData:\n            \"0xc03aac639bb21233e0139381970328db8bceeb67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\",\n        };\n    }\n  },\n  paymasterDataMiddleware: async (struct) => {\n    const { paymasterAndData } = await (\n      provider.rpcClient as ClientWithAlchemyMethods\n    ).request({\n      method: \"alchemy_requestPaymasterAndData\",\n      params: [\n        {\n          policyId: config.policyId,\n          entryPoint: provider.getEntryPointAddress(),\n          userOperation: deepHexlify(await resolveProperties(struct)),\n        },\n      ],\n    });\n    return { paymasterAndData };\n  },\n});\n\n/**\n * This uses the alchemy RPC method: `alchemy_requestGasAndPaymasterAndData` to get all of the gas estimates + paymaster data\n * in one RPC call. It will no-op the gas estimator and fee data getter middleware and set a custom middleware that makes the RPC call.\n *\n * @param config - the alchemy gas manager configuration\n * @returns middleware overrides for paymaster middlewares\n */\nconst withAlchemyGasAndPaymasterAndDataMiddleware = (\n  provider: AlchemyProvider,\n  config: AlchemyGasManagerConfig\n): Parameters<AlchemyProvider[\"withPaymasterMiddleware\"]>[\"0\"] => ({\n  paymasterDataMiddleware: async (struct) => {\n    const userOperation: UserOperationRequest = deepHexlify(\n      await resolveProperties(struct)\n    );\n\n    let feeOverride = undefined;\n    if (userOperation.maxFeePerGas && BigInt(userOperation.maxFeePerGas) > 0n) {\n      feeOverride = {\n        maxFeePerGas: userOperation.maxFeePerGas,\n        maxPriorityFeePerGas: userOperation.maxPriorityFeePerGas,\n      };\n    }\n\n    const result = await (\n      provider.rpcClient as ClientWithAlchemyMethods\n    ).request({\n      method: \"alchemy_requestGasAndPaymasterAndData\",\n      params: [\n        {\n          policyId: config.policyId,\n          entryPoint: provider.getEntryPointAddress(),\n          userOperation: userOperation,\n          dummySignature: userOperation.signature,\n          feeOverride: feeOverride,\n        },\n      ],\n    });\n\n    return result;\n  },\n});\n"]}