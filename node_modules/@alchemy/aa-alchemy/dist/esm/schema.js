import { createSmartAccountProviderConfigSchema } from "@alchemy/aa-core";
import { Alchemy } from "alchemy-sdk";
import z from "zod";
export const ConnectionConfigSchema = z.union([
    z.object({
        rpcUrl: z.never().optional(),
        apiKey: z.string(),
        jwt: z.never().optional(),
    }),
    z.object({
        rpcUrl: z.never().optional(),
        apiKey: z.never().optional(),
        jwt: z.string(),
    }),
    z.object({
        rpcUrl: z.string(),
        apiKey: z.never().optional(),
        jwt: z.never().optional(),
    }),
    z.object({
        rpcUrl: z.string(),
        apiKey: z.never().optional(),
        jwt: z.string(),
    }),
]);
export const FeeOptsSchema = z.object({
    baseFeeBufferPercent: z.bigint().optional(),
    maxPriorityFeeBufferPercent: z.bigint().optional(),
    preVerificationGasBufferPercent: z.bigint().optional(),
});
export const AlchemyProviderConfigSchema = z
    .object({
    feeOpts: FeeOptsSchema.optional(),
})
    .and(createSmartAccountProviderConfigSchema().omit({ rpcProvider: true }))
    .and(ConnectionConfigSchema);
export const AlchemySdkClientSchema = z.instanceof(Alchemy);
//# sourceMappingURL=schema.js.map