import type { AlchemyProvider } from "../provider.js";
export interface AlchemyGasManagerConfig {
    policyId: string;
}
/**
 * This middleware wraps the Alchemy Gas Manager APIs to provide more flexible UserOperation gas sponsorship.
 *
 * If `estimateGas` is true, it will use `alchemy_requestGasAndPaymasterAndData` to get all of the gas estimates + paymaster data
 * in one RPC call.
 *
 * Otherwise, it will use `alchemy_requestPaymasterAndData` to get only paymaster data, allowing you
 * to customize the gas and fee estimation middleware.
 *
 * @param provider - the smart account provider to override to use the alchemy gas manager
 * @param config - the alchemy gas manager configuration
 * @param estimateGas - if true, this will use `alchemy_requestGasAndPaymasterAndData` else will use `alchemy_requestPaymasterAndData`
 * @returns the provider augmented to use the alchemy gas manager
 */
export declare const withAlchemyGasManager: (provider: AlchemyProvider, config: AlchemyGasManagerConfig, estimateGas?: boolean) => AlchemyProvider;
//# sourceMappingURL=gas-manager.d.ts.map