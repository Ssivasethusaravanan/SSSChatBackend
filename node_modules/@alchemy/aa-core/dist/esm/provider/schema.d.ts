import type { Transport } from "viem";
import z from "zod";
import type { SupportedTransports } from "../client/types";
export declare const SmartAccountProviderOptsSchema: z.ZodObject<{
    txMaxRetries: z.ZodOptional<z.ZodNumber>;
    txRetryIntervalMs: z.ZodOptional<z.ZodNumber>;
    txRetryMulitplier: z.ZodOptional<z.ZodNumber>;
    minPriorityFeePerBid: z.ZodOptional<z.ZodBigInt>;
    maxPriorityFeePerGasEstimateBuffer: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    txMaxRetries?: number | undefined;
    txRetryIntervalMs?: number | undefined;
    txRetryMulitplier?: number | undefined;
    minPriorityFeePerBid?: bigint | undefined;
    maxPriorityFeePerGasEstimateBuffer?: number | undefined;
}, {
    txMaxRetries?: number | undefined;
    txRetryIntervalMs?: number | undefined;
    txRetryMulitplier?: number | undefined;
    minPriorityFeePerBid?: bigint | undefined;
    maxPriorityFeePerGasEstimateBuffer?: number | undefined;
}>;
export declare const createSmartAccountProviderConfigSchema: <TTransport extends SupportedTransports = Transport>() => z.ZodObject<{
    rpcProvider: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    opts: z.ZodOptional<z.ZodObject<{
        txMaxRetries: z.ZodOptional<z.ZodNumber>;
        txRetryIntervalMs: z.ZodOptional<z.ZodNumber>;
        txRetryMulitplier: z.ZodOptional<z.ZodNumber>;
        minPriorityFeePerBid: z.ZodOptional<z.ZodBigInt>;
        maxPriorityFeePerGasEstimateBuffer: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    }, {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
    rpcProvider: (string | import("../client/types").PublicErc4337Client<TTransport>) & (string | import("../client/types").PublicErc4337Client<TTransport> | undefined);
    entryPointAddress?: `0x${string}` | undefined;
    opts?: {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    } | undefined;
}, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
    rpcProvider: (string | import("../client/types").PublicErc4337Client<TTransport>) & (string | import("../client/types").PublicErc4337Client<TTransport> | undefined);
    entryPointAddress?: string | undefined;
    opts?: {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    } | undefined;
}>;
