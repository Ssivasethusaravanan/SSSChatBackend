import type { Transport } from "viem";
import z from "zod";
import type { SupportedTransports } from "../client/types";
export declare const SmartAccountProviderOptsSchema: z.ZodObject<{
    /**
     * The maximum number of times to try fetching a transaction receipt before giving up (default: 5)
     */
    txMaxRetries: z.ZodOptional<z.ZodNumber>;
    /**
     * The interval in milliseconds to wait between retries while waiting for tx receipts (default: 2_000)
     */
    txRetryIntervalMs: z.ZodOptional<z.ZodNumber>;
    /**
     * The mulitplier on interval length to wait between retries while waiting for tx receipts (default: 1.5)
     */
    txRetryMulitplier: z.ZodOptional<z.ZodNumber>;
    /**
     * Used when computing the fees for a user operation (default: 100_000_000n)
     */
    minPriorityFeePerBid: z.ZodOptional<z.ZodBigInt>;
    /**
     * Percent value for maxPriorityFeePerGas estimate added buffer. maxPriorityFeePerGasBid is set to the max
     * between the buffer "added" priority fee estimate and the minPriorityFeePerBid (default: 33)
     */
    maxPriorityFeePerGasEstimateBuffer: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    txMaxRetries?: number | undefined;
    txRetryIntervalMs?: number | undefined;
    txRetryMulitplier?: number | undefined;
    minPriorityFeePerBid?: bigint | undefined;
    maxPriorityFeePerGasEstimateBuffer?: number | undefined;
}, {
    txMaxRetries?: number | undefined;
    txRetryIntervalMs?: number | undefined;
    txRetryMulitplier?: number | undefined;
    minPriorityFeePerBid?: bigint | undefined;
    maxPriorityFeePerGasEstimateBuffer?: number | undefined;
}>;
export declare const createSmartAccountProviderConfigSchema: <TTransport extends SupportedTransports = Transport>() => z.ZodObject<{
    rpcProvider: z.ZodUnion<[z.ZodString, z.ZodType<import("../client/types").PublicErc4337Client<TTransport>, z.ZodTypeDef, import("../client/types").PublicErc4337Client<TTransport>>]>;
    chain: z.ZodType<import("viem").Chain, z.ZodTypeDef, import("viem").Chain>;
    /**
     * Optional entry point contract address for override if needed.
     * If not provided, the entry point contract address for the provider is the connected account's entry point contract,
     * or if not connected, falls back to the default entry point contract for the chain.
     *
     * Refer to https://docs.alchemy.com/reference/eth-supportedentrypoints for all the supported entrypoints
     * when using Alchemy as your RPC provider.
     */
    entryPointAddress: z.ZodOptional<z.ZodEffects<z.ZodString, `0x${string}`, string>>;
    opts: z.ZodOptional<z.ZodObject<{
        /**
         * The maximum number of times to try fetching a transaction receipt before giving up (default: 5)
         */
        txMaxRetries: z.ZodOptional<z.ZodNumber>;
        /**
         * The interval in milliseconds to wait between retries while waiting for tx receipts (default: 2_000)
         */
        txRetryIntervalMs: z.ZodOptional<z.ZodNumber>;
        /**
         * The mulitplier on interval length to wait between retries while waiting for tx receipts (default: 1.5)
         */
        txRetryMulitplier: z.ZodOptional<z.ZodNumber>;
        /**
         * Used when computing the fees for a user operation (default: 100_000_000n)
         */
        minPriorityFeePerBid: z.ZodOptional<z.ZodBigInt>;
        /**
         * Percent value for maxPriorityFeePerGas estimate added buffer. maxPriorityFeePerGasBid is set to the max
         * between the buffer "added" priority fee estimate and the minPriorityFeePerBid (default: 33)
         */
        maxPriorityFeePerGasEstimateBuffer: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    }, {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
    rpcProvider: (string | import("../client/types").PublicErc4337Client<TTransport>) & (string | import("../client/types").PublicErc4337Client<TTransport> | undefined);
    entryPointAddress?: `0x${string}` | undefined;
    opts?: {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    } | undefined;
}, {
    chain: import("viem/_types/types/chain.js").ChainConstants & import("viem/_types/types/chain.js").ChainConfig<import("viem").ChainFormatters | undefined>;
    rpcProvider: (string | import("../client/types").PublicErc4337Client<TTransport>) & (string | import("../client/types").PublicErc4337Client<TTransport> | undefined);
    entryPointAddress?: string | undefined;
    opts?: {
        txMaxRetries?: number | undefined;
        txRetryIntervalMs?: number | undefined;
        txRetryMulitplier?: number | undefined;
        minPriorityFeePerBid?: bigint | undefined;
        maxPriorityFeePerGasEstimateBuffer?: number | undefined;
    } | undefined;
}>;
//# sourceMappingURL=schema.d.ts.map