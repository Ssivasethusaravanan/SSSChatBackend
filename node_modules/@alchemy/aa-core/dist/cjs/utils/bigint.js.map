{"version":3,"file":"bigint.js","sourceRoot":"","sources":["../../../src/utils/bigint.ts"],"names":[],"mappings":";;;AAQO,MAAM,SAAS,GAAG,CAAC,GAAG,IAAc,EAAE,EAAE;IAC7C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;KAC7D;IAED,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC;AANW,QAAA,SAAS,aAMpB;AAeK,MAAM,aAAa,GAAG,CAAC,IAAkB,EAAE,OAAe,EAAE,EAAE;IACnE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC;AACzC,CAAC,CAAC;AAFW,QAAA,aAAa,iBAExB","sourcesContent":["import type { BigNumberish } from \"../types\";\n\n/**\n * Returns the max bigint in a list of bigints\n *\n * @param args a list of bigints to get the max of\n * @returns the max bigint in the list\n */\nexport const bigIntMax = (...args: bigint[]) => {\n  if (!args.length) {\n    throw new Error(\"bigIntMax requires at least one argument\");\n  }\n\n  return args.reduce((m, c) => (m > c ? m : c));\n};\n\n/**\n * Useful if you want to increment a bigint by N% or decrement by N%\n *\n * example:\n * ```\n * const tenPercentIncrease = bigIntPercent(100n, 110n);\n * const tenPercentDecrease = bigIntPercent(100n, 90n);\n * ```\n *\n * @param base -- the base bigint that we want to apply a percent to\n * @param percent -- the percent to apply to the base\n * @returns the base multiplied by the percent and divided by 100\n */\nexport const bigIntPercent = (base: BigNumberish, percent: bigint) => {\n  return (BigInt(base) * percent) / 100n;\n};\n"]}